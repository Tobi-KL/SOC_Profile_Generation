{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Household.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyORL5tnxOomBg4Hce/CmPnX",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Tobi-KL/mobility_profile_generation/blob/main/mobility_profile_generation/classes/Household\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "478JyoAUm5KD"
      },
      "source": [
        "# erstellt ein Haushalt-Objekt\n",
        "# enthält Informationen über den gewählten Haushalt (Anzahl Bewohner, Anzahl Fahrer, alle Mobilitätsprofile der Bewohner, Position im Datensatz ... )\n",
        "# vorerst: entweder zufällig oder mit bekannter ID\n",
        "# TODO: Eingabemöglichkeit verschiedener Parameter (z.B. Haushaltsgröße, Einkommen etc.) -> Rückgabe einer Liste der ähnlichsten Haushalte (set-Methoden)\n",
        "\n",
        "class Household:\n",
        "    def __init__(self, household_ID):\n",
        "        self.household_ID = household_ID\n",
        "        #self.household_size = household_size\n",
        "        self.position = np.where(meta_mop_filtered[:,0] == self.household_ID)[0]\n",
        "        self.chosen_household = meta_mop_filtered.astype(int) [np.where(meta_mop_filtered[:,0] == self.household_ID)]\n",
        "\n",
        "        \"\"\"\n",
        "        - Constructor of household object\n",
        "        - householdID: ID of household (MOP-Data) -> sorted in ascending order\n",
        "        - householdSize: # of occupants of household\n",
        "        \"\"\"\n",
        "  \n",
        "    def get_household(self):\n",
        "      return self.chosen_household.astype(int)\n",
        "    # returns chosen household (array with >= 1 entries (1 entry = 1 person, 1 year))\n",
        "\n",
        "    def get_number_of_occupants(self):\n",
        "      return self.chosen_household[0,5]\n",
        "    # returns number of occupants living in chosen household\n",
        "    \n",
        "    def get_number_of_drivers(self):\n",
        "      states = self.get_states(0,1008) # betrachte states in der ganzen Woche\n",
        "      number_of_drivers = 0\n",
        "      for i in range(0,len(states)):\n",
        "        if ((states[i]==14).sum() > 0):\n",
        "          number_of_drivers += 1\n",
        "      return number_of_drivers\n",
        "    # returns number of drivers (at least one state == 14) living in chosen household\n",
        "\n",
        "    def get_drivers(self):\n",
        "      states = self.get_states(0,1008) # betrachte states in der ganzen Woche\n",
        "      drivers_list = []\n",
        "      for i in range(0,len(states)):\n",
        "          if ((states[i]==14).sum() > 0):\n",
        "            drivers_list.append(self.get_data_position()[i])\n",
        "      return drivers_list\n",
        "    # returns list of all drivers of chosen household (nur ihre positions)\n",
        "    \n",
        "    def get_number_of_cars(self):\n",
        "      return self.chosen_household[0,7]\n",
        "    # returns number of cars of chosen household\n",
        "    \n",
        "    def get_data_position(self):\n",
        "      position_list = []\n",
        "      for i in self.position:\n",
        "          position_list.append(i)\n",
        "      return position_list\n",
        "    # returns indeces of chosen household in data set\n",
        "    \n",
        "    def get_states(self, start, end):\n",
        "      for i in self.position:\n",
        "        return states_mop_filtered[self.position,start:end]\n",
        "    # returns ALL states for timespace between start and end\n",
        "\n",
        "    def get_adjusted_states(self, start, end):\n",
        "      states = self.get_states(start,end)\n",
        "      #states = np.where((states == 8) | (states == 14) | (states == 1) | (states == 2), states, 30)\n",
        "      return states\n",
        "    # returns adjusted states\n",
        "    # 8: home; 1,2: work; 14: Car driver; 30: rest\n",
        "\n",
        "    def get_speeds(self, start, end):\n",
        "      for i in self.position:\n",
        "        return speed_mop_filtered[self.position,start:end]\n",
        "    # returns all speeds for timespace between start and end\n",
        "\n",
        "    def get_persons(self, person_number):\n",
        "      household_positions = self.get_data_position()\n",
        "      persons = [Person (position = i, household_ID = self.household_ID) for i in household_positions]\n",
        "      return persons[person_number].position\n",
        "    # returns position of chosen Person-object in data set\n",
        "\n",
        "    def get_sorted_drivers(self):\n",
        "      household_drivers = self.get_drivers()\n",
        "      drivers = []   \n",
        "      for i in household_drivers:\n",
        "        drivers.append(Person(position = i, household_ID = self.household_ID)) #erstellt für jeden driver ein Person-Object\n",
        "      sorted_drivers = sorted(drivers, key=lambda x: x.total_distance, reverse=True)\n",
        "      result = []\n",
        "      for i in range(0,len(sorted_drivers)):\n",
        "        result.append(sorted_drivers[i].position)\n",
        "      return result\n",
        "    # returns list with all drivers in household sorted in descending order by total distance (in whole week)\n",
        "    ### testen, ob sortieren funktioniert (-> alle sind in MOP bereits absteigend sortiert!)\n",
        "\n",
        "    def get_sorted_drivers_profiles(self, start, end):\n",
        "      drivers_list = self.get_sorted_drivers()\n",
        "      drivers_profiles = np.array([self.get_adjusted_states(start,end)[0]]) \n",
        "      for i in range(1, len(drivers_list)):\n",
        "        drivers_profiles = np.append(drivers_profiles, [self.get_adjusted_states(start,end)[i]], axis=0) \n",
        "      return drivers_profiles\n",
        "    # returns profiles of all drivers (if they don´t have to be merged)\n",
        "\n",
        "    def get_drivers_states_profiles(self, start, end):\n",
        "      if self.check_merge()==True:\n",
        "        drivers_states_profiles = self.states_merge(start,end)\n",
        "      else:\n",
        "        drivers_states_profiles = self.get_sorted_drivers_profiles(start,end)\n",
        "      return drivers_states_profiles\n",
        "    # returns final states profiles for drivers  \n",
        "\n",
        "    def check_merge(self):\n",
        "      if (self.get_number_of_drivers() > self.get_number_of_cars()):\n",
        "        #print(\"Merge necessary.\")\n",
        "        return True\n",
        "      else:\n",
        "        #print(\"No merge necessary.\")\n",
        "        return  False\n",
        "    # checks whether a mobility profile merge is necessary\n",
        " \n",
        "    def states_merge(self, start, end):\n",
        "    # Drivers müssen bereits sortiert sein!\n",
        "      x = self.get_number_of_drivers()\n",
        "      while x > self.get_number_of_cars():\n",
        "        drivers_positions = self.get_sorted_drivers()      #Liste aller Positionen der Drivers in data\n",
        "        \n",
        "        # 2. erstelle Array mit Listen aller states (für jeden driver eine Liste)\n",
        "        all_states_drivers = np.array([self.get_adjusted_states(start,end)[0]]) \n",
        "        for i in range(1, len(drivers_positions)):\n",
        "          all_states_drivers = np.append(all_states_drivers, [self.get_adjusted_states(start,end)[i]], axis=0)    \n",
        "\n",
        "        # 3. betrachte ein array aus den letzten beiden Listen\n",
        "        drivers_last_two = all_states_drivers[-2:]\n",
        "\n",
        "        # 4. ziehe positions aller 14er aus der letzten Liste heraus\n",
        "        list_states14_last_driver = [i for i in range(len(drivers_last_two[-1])) if drivers_last_two[-1][i] == 14]\n",
        "\n",
        "        # 5. erzeuge eine neue Liste (vorletzte Liste komplette + 14er der letzten Liste)\n",
        "        drivers_last_two_merged = all_states_drivers[-2].copy()\n",
        "        for i in list_states14_last_driver:\n",
        "          drivers_last_two_merged[i] = 14\n",
        "        \n",
        "        # 6. ersetze die letzten beiden Listen des arrays durch das neue Array\n",
        "        all_states_drivers = np.delete(all_states_drivers, [-1,-2], axis=0)\n",
        "        drivers_merged_profiles = np.vstack((all_states_drivers, drivers_last_two_merged))\n",
        "\n",
        "        x -= 1\n",
        "      #print(\"Merge completed.\")\n",
        "      return drivers_merged_profiles\n",
        "    # returns merged states profiles\n",
        "\n",
        "    def speed_merge(self, start, end):\n",
        "    # Drivers müssen bereits sortiert sein!\n",
        "      x = self.get_number_of_drivers()\n",
        "      while x > self.get_number_of_cars():\n",
        "        drivers_positions = self.get_sorted_drivers()      #Liste aller Positionen der Drivers in data\n",
        "        \n",
        "        # 2. erstelle Array mit Listen aller states (für jeden driver eine Liste) und ein Array mit Listen aller speeds\n",
        "        all_states_drivers = np.array([self.get_adjusted_states(start,end)[0]])\n",
        "        all_speeds_drivers = np.array([self.get_speeds(start,end)[0]]) \n",
        "        for i in range(1, len(drivers_positions)):\n",
        "          all_states_drivers = np.append(all_states_drivers, [self.get_adjusted_states(start,end)[i]], axis=0)\n",
        "        for i in range(1, len(drivers_positions)):\n",
        "          all_speeds_drivers = np.append(all_speeds_drivers, [self.get_speeds(start,end)[i]], axis=0)\n",
        "           \n",
        "\n",
        "        # 3. betrachte ein array aus den letzten beiden Listen\n",
        "        drivers_last_two_states = all_states_drivers[-2:]\n",
        "        drivers_last_two_speeds = all_speeds_drivers[-2:]\n",
        "\n",
        "        # 4. ziehe positions aller 14er aus der letzten Liste heraus\n",
        "        list_states14_last_driver = [i for i in range(len(drivers_last_two_states[-1])) if drivers_last_two_states[-1][i] == 14]\n",
        "\n",
        "        # 5. erzeuge eine neue Liste (vorletzte Liste komplette + 14er der letzten Liste)\n",
        "        \n",
        "        drivers_last_two_speeds_merged = all_speeds_drivers[-2].copy()\n",
        "        for i in list_states14_last_driver:\n",
        "          drivers_last_two_speeds_merged[i] = all_speeds_drivers[-1][i]\n",
        "        \n",
        "        # 6. ersetze die letzten beiden Listen des arrays durch das neue Array\n",
        "        all_speeds_drivers = np.delete(all_speeds_drivers, [-1,-2], axis=0)\n",
        "        drivers_merged_speed_profiles = np.vstack((all_speeds_drivers, drivers_last_two_speeds_merged))\n",
        "\n",
        "        x -= 1\n",
        "      #print(\"Merge completed.\")\n",
        "      return drivers_merged_speed_profiles\n",
        "    # returns merged speed profiles\n",
        "\n",
        "    def get_drivers_speed(self, start, end): #ohne merge (vgl. states -> umbenennen!)\n",
        "      drivers_list = self.get_sorted_drivers()\n",
        "      drivers_profiles = np.array([self.get_speeds(start,end)[0]])    #speeds der ersten person ##[]\n",
        "      for i in range(1, len(drivers_list)):\n",
        "        drivers_profiles = np.append(drivers_profiles, [self.get_speeds(start,end)[i]], axis=0) ##[]\n",
        "      return drivers_profiles\n",
        "    # returns array with speeds of all drivers\n",
        "\n",
        "    def get_speeds_after_merge(self,start,end):\n",
        "      if self.check_merge()==True:\n",
        "        drivers_speeds_profiles = self.speed_merge(start,end)\n",
        "      else:\n",
        "        drivers_speeds_profiles = self.get_drivers_speed(start,end)\n",
        "      return drivers_speeds_profiles\n",
        "\n",
        "    def get_drivers_speeds_profiles(self, start, end):\n",
        "      states = np.array(self.get_drivers_states_profiles(start,end))\n",
        "      speeds = np.array(self.get_speeds_after_merge(start,end)) \n",
        "      mask = np.where((states==14), False, True)      #mit Hilfe der Maske werden alle Speeds, die nicht zu einem 14er state gehören, rausgefiltert\n",
        "      drivers_speeds_profiles = speeds.copy()\n",
        "      drivers_speeds_profiles[mask] = 0\n",
        "      return drivers_speeds_profiles\n",
        "    # returns final speed profiles of alle drivers (only speeds of states=14)"
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}