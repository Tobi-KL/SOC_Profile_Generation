# -*- coding: utf-8 -*-
"""Person.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UKefSH5fSHdKtfZtT3rbXcWXDkLZoZl6
"""

class Person:
    """ Class Person:
    - holds information about individual persons and their mobility profile
    - is used to check all household occupants for possible drivers
    - calculates total driven distance by individual person
    """

    def __init__(self, position, household_ID):
        """ inits Person class with:
        Args: 
          - position:       position of individual person in dataset
          - household_ID:   ID of household
        Instance attributes:
          - driver_bool:    bool variable , true: person is a driver
          - total_distance: total driven distance of individual person        
        """

        self.position = position
        self.household_ID = household_ID

       
        if ((self.get_state(0, no_of_ts) == 14).sum() > 0):
            self.driver_bool = True  #true, if person is a driver
        else:
            self.driver_bool = False
      
        if self.driver_bool == True:

            # list of states = 14
            driving_pos = self.get_driving_positions(0, no_of_ts)
            speeds_sum = 0
            for i in driving_pos:

                # sum of driving speeds 
                speeds_sum = speeds_sum + self.get_single_speed(i)

            mean_speed = speeds_sum / len(driving_pos)
            time = len(driving_pos) * ts_length
            distance = mean_speed * time / 60
            self.total_distance = distance
        else:
            self.total_distance = 0

    def get_state(self, start, end):
        """ returns states for individual persons between start and end
        """
        states = states_mop_data[self.position,start:end]
        return states

    def get_single_speed(self, timestep):
        """ returns speed for one single timestep
        """
        return speed_mop_data[self.position, timestep]

    def get_driving_positions(self, start, end):
        """ returns every position in states where state=14 between start, end
        """
        driving_pos = [i for i in range(len(self.get_state(start, end))) if (
            self.get_state(start, end)[i] == 14)]
        return driving_pos