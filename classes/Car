class Car:
    def __init__(self, household_ID, car_nr):
      self.household_ID = household_ID
      self.car_nr = car_nr  # number of car in household (1st = 1, 2nd = 2 ... )
    
    """
    - Constructor of Car-Profile Object
    - householdID: ID of household (MOP-Data) -> sorted in ascending order
    """

    def get_speed_profile(self, start, end):
      household_1 = Household(household_ID = self.household_ID)
      speed_profile = household_1.get_drivers_speeds_profiles(start, end)
      return speed_profile [self.car_nr - 1]
    # returns speed profile for chosen car

    def get_state_profile(self, start, end):
      household_1 = Household(household_ID = self.household_ID)
      state_profile = household_1.get_drivers_states_profiles(start, end)
      return state_profile [self.car_nr - 1]
    # returns state profile for chosen car

    def get_segment(self):
      cars = csv [np.where(csv[:,0] == self.household_ID)]
      segment = cars[self.car_nr - 1 : self.car_nr , 174]
      return segment.astype(int)
    # returns segment of chosen car
    
    def get_segments(self):
      cars = csv [np.where(csv[:,0] == self.household_ID)] 
      segments = cars[:,174]
      return segments.astype(int)
    # returns segments of all cars in household (sorted by overall driven distance per year)
    
    def get_charging_options(self, start, end, home_charging_power, work_charging_power):
      states = self.get_state_profile(start,end)
      #charge_array = states.copy()
      charge_array = np.where((states == 8), home_charging_power, np.where((states == 1) | (states == 2), work_charging_power, np.where((states == 14), -100, 0))) 
      return charge_array
    # returns array with charging options (considers charging power at home, at work; 0 when not in use (but neither at home or work), -100 when in use)
