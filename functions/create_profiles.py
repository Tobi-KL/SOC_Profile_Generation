# -*- coding: utf-8 -*-
"""create_profiles.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UKefSH5fSHdKtfZtT3rbXcWXDkLZoZl6
"""

def create_profiles(IDs,
                    start,
                    end,
                    home_charging_power,
                    work_charging_power,
                    efficiency_home,
                    efficiency_work,
                    min_state_of_charge,
                    max_state_of_charge,
                    path,
                    bool_plot = False,
                    bool_create_csv = False):
    """ create_output():
    Creates csv.-files with profiles for each car according
      to input parameters and saves them.
    Generates one csv.-file for one car (multiple files per household possible)
    with the following entries at each timestep and for both max and min 
    charging strategies:
        - Consumption [kWh]
        - possbible charging power [kW]
        - state of charge [kWh]
        - charged power by car [kWh]
        - consumed power at charging station [kWh]
    Args:
    - *IDs:                 household ID or list of household IDs (if multiple)
    - start:                first timestep
    - end:                  last timestep
    - home_charging_power:  power of home charging station [kW]
    - work_charging_power:  power of work charging station [kW]
    - efficiency_home:      efficiency of home charging station, default: 0.95
    - efficiency_work:      efficiency of work charging station, default: 0.95
    - min_state_of_charge:  min possible state of charge in %, default = 10%
    - max_state_of_charge:  min possible state of charge in %, default = 90%
    - path:                 path to folder for csv.-file creation
    - bool_plot:            if true: plots are created, default: False
    - bool_create_csv:      if true: csv-files are created, default: False
    """
    # create Household object(s)
    household_list = IDs  
    for i in household_list:
        household = Household(i)
        print("\n")
        print("Household:", household.household_ID)

        # create car object(s):
        for j in range(0, household.number_of_cars):
            car_nr = j + 1
            car = Car(household.household_ID,
                      car_nr, 
                      min_state_of_charge, 
                      max_state_of_charge)
            print("Car:", car_nr)
            print("Segment:", car.segment)

            # create profiles:
            consumption_profile = car.generate_consumption_profile(start, end)

            charging_pwr_profile = car.get_charging_power(start, 
                                                          end, 
                                                          home_charging_power, 
                                                          work_charging_power)

            max_strategy = car.max_state_of_charge_profile(start, 
                                                           end, 
                                                           home_charging_power, 
                                                           work_charging_power, 
                                                           efficiency_home, 
                                                           efficiency_work)
            min_strategy = car.min_state_of_charge_profile(start, 
                                                           end, 
                                                           home_charging_power, 
                                                           work_charging_power, 
                                                           efficiency_home, 
                                                           efficiency_work)

            if max_strategy:     # if array not empty -> generation possible
                max_state_of_charge_profile = max_strategy[0]
                max_charge_profile = max_strategy[1]
                max_home_profile = max_strategy[2]
                max_work_profile = max_strategy[3]

                min_state_of_charge_profile = min_strategy[0]
                min_charge_profile = min_strategy[1]
                min_home_profile = min_strategy[2]
                min_work_profile = min_strategy[3]

                print("\nOverall demand Household", 
                      household.household_ID, ", Car",
                      car_nr, "[kWh]:", sum(consumption_profile))
                print("\nHome demand max strategy Household", 
                      household.household_ID, ", Car",
                      car_nr, "[kWh]:", sum(max_home_profile))
                print("\nWork demand max strategy Household", 
                      household.household_ID, ", Car", car_nr,
                      "[kWh]:", sum(max_work_profile))
                print("\nHome demand min strategy Household", 
                      household.household_ID, ", Car", car_nr,
                      "[kWh]:", sum(min_home_profile))
                print("\nWork demand min strategy Household", 
                     household.household_ID, ", Car", car_nr,
                     "[kWh]:", sum(min_work_profile))
                print("\n")

                if bool_plot == True:
                    figure_title = ("\nPlot Household " 
                                    + str (household.household_ID) 
                                    + " - Car " 
                                    + str (car_nr) 
                                    + ":")
                    plt.figure()
                    plt.plot(max_state_of_charge_profile, 
                             label = "Max charging strategy")
                    plt.plot(min_state_of_charge_profile, 
                             label = "Min charging strategy")
                    plt.hlines(car.capacity, 0, end-start-1, "red", 
                               label = "Max and Min State of charge")
                    plt.hlines(0, 0, end-start-1, "red")
                    plt.xlabel("Timestep")
                    plt.ylabel("State of charge [kWh]")
                    plt.legend(bbox_to_anchor=(1.05, 1), loc='upper left')
                    plt.title(figure_title)
                    plt.show()
                    print("\n")
            
                if bool_create_csv == True:
                    path_file = os.path.join(path,
                                             'state_of_charge_profile_from_' 
                                             + str (start) + '_to_' 
                                             + str (end) + '_ID_' 
                                             + str (household.household_ID) 
                                             + '_car_nr' 
                                             + str (car_nr) + '.csv')
                    np.savetxt(path_file, 
                               np.column_stack((consumption_profile,
                                                charging_pwr_profile,
                                                max_state_of_charge_profile,
                                                max_charge_profile,
                                                max_home_profile,
                                                max_work_profile,
                                                min_state_of_charge_profile,
                                                min_charge_profile,
                                                min_home_profile,
                                                min_work_profile)),
                                delimiter=";",
                                encoding = "ISO-8859-1",
                                fmt="%1.2f",
                                header='Consumption;Charging power;'\
                                'MAX state of charge;MAX charging;MAX home;'\
                                'MAX work;MIN state of charge;MIN charging;'\
                                'MIN home;MIN work', comments='')